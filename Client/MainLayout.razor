@inherits LayoutComponentBase
@inject LoginService loginService
@inject DialogService DialogService
@inject NavigationManager Navigation

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">
<RadzenComponents />

<CascadingValue Value="this">
    <div class="h-100 d-flex flex-column justify-content-between align-items-center">
        <header class="w-100">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="container">
                    <a class="navbar-brand" href="#">Logo</a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarSupportedContent">
                        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                            <li class="nav-item">
                                <a class="nav-link active" href="#">Home</a>
                            </li>
                            @if (LoginService.IsLoggedIn)
                            {
                                <li class="nav-item">
                                    <a class="nav-link" href="/">@LoginService.User</a>
                                </li>
                            <li class="nav-item">
                                <button class="nav-link" @onclick="Logout">Logout</button>
                            </li>
                            }
                            else
                            {
                                <li class="nav-item">
                                    <a class="nav-link" href="/login">Login</a>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </nav>
        </header>

        <div class="container m-5">
            @if(LoginService.IsLoggedIn){
                RunTimer();
            }
            @if (rerender && LoginService.IsLoggedIn)
            {
                result = DialogService.Confirm("Your session is about to expire!\nDo you want to renew it?", "Session renewal", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
            }
            @Body
        </div>

        <footer class="footer mt-auto py-3 bg-light bottom-0 w-100">
            <div class="container d-flex justify-content-center align-items-center">
                <span class="text-muted">Sudent's notes</span>
            </div>
        </footer>
        <style>
            footer {
                position: fixed;
                bottom: 0;
                left: 0;
                width: 100%;
                background-color: #f5f5f5; /* Adjust background color */
                padding: 1rem;
                text-align: center;
            }
        </style>
    </div>
</CascadingValue>

@code {
    bool rerender = false;
    Task<bool?> result;
    public PeriodicTimer? Timer;


    public async Task RunTimer()
    {

        if (Timer == null)
        {
            Timer = new(TimeSpan.Parse("00:01:00"));
        }

        while (await Timer.WaitForNextTickAsync())
        {
            rerender = true;
            StateHasChanged();
            bool? res = await result;
            Console.WriteLine(res);
            if (res == true)
            {
                await loginService.RenewSession();
                Timer.Dispose();
                Timer = new(TimeSpan.Parse("00:00:15"));
            }
            else
            {
                LoginService.IsLoggedIn = false;
                Timer.Dispose();
                await loginService.LogOut();
                Navigation.NavigateTo("/login");
            }
        }
        
    
    }

    public void Dispose()
    {
        Timer?.Dispose();
        Timer = null;
    }

    private async Task Logout()
    {
        Dispose();
        await loginService.LogOut();
        //StateHasChanged();
        Navigation.NavigateTo("/");
    }

}