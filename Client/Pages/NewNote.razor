@page "/create-note"
@using BeleskeBlazor.Shared.DTO
@using System.Collections.ObjectModel
@using BeleskeBlazor.Client.Service
@using Radzen.Blazor
@using Radzen
@using Radzen.Blazor.Rendering
@using System.Text
@inject NavigationManager Navigation
@inject DataService DataService



<div class="container mt-5 text-center">
    <h1>Welcome to your Notes App!</h1>
    <hr>
    <div class="mt-3">
        <form @onsubmit="SacuvajBelesku">
            <div class="mb-3">
                @if(Predmeti != null && Predmeti.Count > 0){
                    <label for="subjectSelect" class="form-label">Subject:</label>
                    <select class="form-select" id="subjectSelect" @bind:get="SelectedSubject" @bind:set="SubjectInput" >
                        <option selected>Choose...</option>
                        @foreach (var subject in Predmeti)
                        {
                            <option value=@subject>@subject.Naziv</option>
                        }
                    </select>
                }

            </div>
            <div class="mb-3">
                @if (Semestri != null && Semestri.Count > 0){
                    <label for="semestarSelect" class="form-label">Semestar:</label>
                    <select class="form-select" id="semestarSelect" @bind:get="SelectedSemestar" @bind:set="SemestarInput">
                        @foreach (var sem in Semestri)
                        {
                            <option value=@sem>@sem.Broj </option>
                        }
                    </select>
                }
            </div>
            <div class="mb-3">
                @if (Casovi != null && Casovi.Count > 0){
                    <label for="lectureSelect" class="form-label">Lecture:</label>
                    <select class="form-select" id="lectureSelect" @bind:get="SelectedLecture" @bind:set="LectureInput">
                        <option selected>Choose...</option>
                        @foreach (CasDTO lecture in Casovi)
                        {
                            <option value=@lecture>@lecture.RedniBroj - @lecture.Datum (@lecture.profesor.Ime @lecture.profesor.Prezime)</option>
                        }
                    </select>
                }
            </div>
            @if (SelectedLecture != null && SelectedSubject != null)
            {
                <div class="mb-3">
                    <label for="noteTitle" class="form-label">Note Title:</label>
                    <input type="text" class="form-control" id="noteTitle"  @bind-value="title"/>
                </div>
                <div class="mb-3">
                    <label for="noteContent" class="form-label">Note Content:</label>
                    <RadzenHtmlEditor @ref="editor" @bind-Value="@content">
                        <RadzenHtmlEditorUndo />
                        <RadzenHtmlEditorRedo />
                        <RadzenHtmlEditorSeparator />
                        <RadzenHtmlEditorBold />
                        <RadzenHtmlEditorItalic />
                        <RadzenHtmlEditorUnderline />
                        <RadzenHtmlEditorStrikeThrough />
                        <RadzenHtmlEditorSeparator />
                        <RadzenHtmlEditorAlignLeft />
                        <RadzenHtmlEditorAlignCenter />
                        <RadzenHtmlEditorAlignRight />
                        <RadzenHtmlEditorJustify />
                        <RadzenHtmlEditorSeparator />
                        <RadzenHtmlEditorIndent />
                        <RadzenHtmlEditorOutdent />
                        <RadzenHtmlEditorUnorderedList />
                        <RadzenHtmlEditorOrderedList />
                        <RadzenHtmlEditorSeparator />
                        <RadzenHtmlEditorColor />
                        <RadzenHtmlEditorBackground />
                        <RadzenHtmlEditorRemoveFormat />
                        <RadzenHtmlEditorSeparator />
                        <RadzenHtmlEditorSubscript />
                        <RadzenHtmlEditorSuperscript />
                        <RadzenHtmlEditorSeparator />
                        <RadzenHtmlEditorFontName />
                        <RadzenHtmlEditorFontSize />
                        <RadzenHtmlEditorFormatBlock />
                    </RadzenHtmlEditor>
                </div>
                <div class="mb-3">
                    <label for="tagSelect">Tags:</label>
                    <select class="form-select" multiple @bind:get="tagovi" @bind:set="TagoviInput">
                        <option value=1>Predavanje</option>
                        <option value=2>Vezbe</option>
                        <option value=3>Konsultacije</option>
                        <option value=4>Priprema za kolokvijum</option>
                        <option value=5>Skripta</option>
                    </select>
                </div>
                <input type="hidden" id="studentId"  />
                <button type="submit" class="btn btn-primary">Create Note</button>
                
            }
        </form>
    </div>
</div>

@code {
    RadzenHtmlEditor? editor;
    List<PredmetDTO>? Predmeti;
    ObservableCollection<CasDTO>? Casovi;
    ObservableCollection<SemestarDTO>? Semestri;
    PredmetDTO? SelectedSubject = null;
    CasDTO? SelectedLecture = null;
    SemestarDTO? SelectedSemestar = null;
    bool IsSelected;
    string? title;
    string content = "";
    int[] tagovi = new int[5];

    protected override async Task OnInitializedAsync()
    {
        content = "";
        IsSelected = false;
        Casovi = new ObservableCollection<CasDTO>();
        Semestri = new ObservableCollection<SemestarDTO>();
        Predmeti = await DataService.GetAllSubjects();

    }


    private async Task SubjectInput(PredmetDTO? id)
    {
        SelectedSubject = id;
        Semestri!.Clear();
        IsSelected = true;
        (await GetSemestarsAsync(SelectedSubject!.IdPredmet))?.ForEach(x => Semestri.Add(x));
        SelectedLecture = null;
        SelectedSemestar = null;
    }

    private async Task SemestarInput(SemestarDTO? id)
    {
        SelectedSemestar = id; 
        Casovi!.Clear();
        (await GetLecturesAsync(SelectedSubject!.IdPredmet, id!.IdSemestar))?.ForEach(x => Casovi.Add(x));
        SelectedLecture = null;
    }

    private Task<List<SemestarDTO>?> GetSemestarsAsync(int subjectId) => DataService.GetAllSemestarsForSubject(subjectId);

    private Task<List<CasDTO>?> GetLecturesAsync(int subjectId, int lectureId) => DataService.GetAllLecturesForSubjectSemestar(subjectId, lectureId);

    private void LectureInput(CasDTO? id)
    {
        SelectedLecture = id;
    }

    private void TagoviInput(int[] id)
    {
        tagovi = id;
    }

    private async Task SacuvajBelesku()
    {
        byte[] beleska = Encoding.UTF8.GetBytes(content);
        TagDTO[] tagoviDTO = new TagDTO[tagovi.Length];
        for (int i = 0; i<tagovi.Length; i++)
        {
            tagoviDTO[i] = new TagDTO(tagovi[i], null);   
        }
        bool saved = await DataService.SaveBeleska(title, null, beleska, 0, SelectedLecture, tagoviDTO);
        if (saved)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            //error

        }
    }

}
