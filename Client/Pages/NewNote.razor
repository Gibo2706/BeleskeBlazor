@page "/create-note"
@using BeleskeBlazor.Shared
@using System.Collections.ObjectModel

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

<div class="container mt-5 text-center">
    <h1>Welcome to your Notes App!</h1>
    <hr>
    <div class="mt-3">
        <form @onsubmit="HandleSubmit">
            <div class="mb-3">
                <label for="subjectSelect" class="form-label">Subject:</label>
                <select class="form-control" id="subjectSelect" @bind="selectedSubject" @bind:event="onGet(id)">
                    <option value="">-- Select Subject --</option>
                    @if (subjects != null)
                    {
                        @foreach (var subject in subjects)
                        {
                                    <option value="@subject.IdPredmet">@subject.Naziv</option>
                        }
                    }
                </select>
            </div>
            <div class="mb-3">
                <label for="lectureSelect" class="form-label">Lecture:</label>
                <select class="form-control" id="lectureSelect" @bind="selectedLectureId" >
                    <option value="">-- Select Lecture --</option>
                    @if (selectedSubject != null)
                    {
                        @foreach (var lecture in lectures)
                        {
                                    <option value="@lecture.IdCas">@lecture.RedniBroj</option>
                        }
                    }
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Create Note</button>
        </form>
    </div>
</div>

@code {
    Predmet selectedSubject;
    Cas selectedLectureId;
    List<Predmet> subjects;
    ObservableCollection<Cas> lectures;

    public void OnGet(int id)
    {
        selectedSubject = subjects.Where(p => p.IdPredmet == id).First();
        lectures.Clear();
        foreach(Cas c in GetLecturesForSubject(id))
        {
            lectures.Add(c);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        lectures = new ObservableCollection<Cas>();
        subjects = new List<Predmet>()
        {
            new Predmet()
            {
                 IdPredmet = 1,
                 Naziv = "Kita"
            },
            new Predmet()
            {
                 IdPredmet = 2,
                 Naziv = "Kita2"
            },
        };
    }

    private List<Cas> GetLecturesForSubject(int subjectId)
    {
        return new List<Cas>()
        {
            new Cas()
            {
                 IdCas = 1,
                 RedniBroj = 1
            },
            new Cas()
            {
                 IdCas = 2,
                 RedniBroj = 2
            },
        };
    }
    private async Task HandleSubmit()
    {
        
    }
}
