@page "/view-all-notes"
@using BeleskeBlazor.Shared.DTO
@using System.Collections.ObjectModel
@using BeleskeBlazor.Client.Service
@using Radzen.Blazor
@using Radzen
@using Radzen.Blazor.Rendering
@using System.Text
@inject DataService DataService
@inject DialogService DialogService
@inject LoginService loginService
@inject NavigationManager Navigation

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <h2 class="mt-5 mb-4">View All Notes</h2>
            <form @onsubmit="FilterNotes">
                <div class="mb-3">
                    @if (Predmeti != null && Predmeti.Count > 0)
                    {
                        <label for="subjectSelect" class="form-label">Subject:</label>
                        <select class="form-select" id="subjectSelect" @bind:get="SelectedSubject" @bind:set="SubjectInput">
                            <option value="" selected>Choose...</option>
                            @foreach (var subject in Predmeti)
                            {
                                <option value=@subject>@subject.Naziv</option>
                            }
                        </select>
                    }

                </div>
                <div class="mb-3">
                    @if (Semestri != null && Semestri.Count > 0)
                    {
                        <label for="semestarSelect" class="form-label">Semestar:</label>
                        <select class="form-select" id="semestarSelect" @bind:get="SelectedSemestar" @bind:set="SemestarInput">
                            <option value="" selected>Choose...</option>
                            @foreach (var sem in Semestri)
                            {
                                <option value=@sem>@sem.Broj </option>
                            }
                        </select>
                    }
                </div>
                <div class="mb-3">
                    @if (Casovi != null && Casovi.Count > 0)
                    {
                        <label for="lectureSelect" class="form-label">Lecture:</label>
                        <select class="form-select" id="subjectSelect" @bind:get="SelectedLecture" @bind:set="LectureInput">
                            <option value="" selected>Choose...</option>
                            @foreach (var subject in Casovi)
                            {
                                <option value=@subject>@subject.RedniBroj - @subject.Datum</option>
                            }
                        </select>
                    }
                </div>
                <div class="form-group">
                    <label for="authorName">Author's name:</label>
                    <input type="text" class="form-control" id="authorName" @bind="authorName" />
                </div>
                <div class="form-group">
                    <label for="authorSurname">Author's surname:</label>
                    <input type="text" class="form-control" id="authorSurname" @bind="authorSurname" />
                </div>
                <div class="form-group">
                    <label for="titleSearch">Title:</label>
                    <input type="text" class="form-control" id="titleSearch" @bind="title" />
                </div>
                <div class="form-group mb-3 mt-2 row align-items-center justify-content-center">
                    <span class="row text-center row-sm-3">Date From:</span>
                    <RadzenDatePicker class="col" @bind-Value=@datumOd ShowCalendarWeek />
                </div>
                <div class="form-group mb-3 mt-2 row align-items-center justify-content-center">
                    <span class="row text-center row-sm-3">Date to:</span>
                    <RadzenDatePicker class="col" @bind-Value=@datumDo ShowCalendarWeek />
                </div>
                <div class="mb-3">
                    <label for="tagSelect">Tags:</label>
                    <select class="form-select" multiple @bind:get="tagovi" @bind:set="TagoviInput">
                        <option value=1>Predavanje</option>
                        <option value=2>Vezbe</option>
                        <option value=3>Konsultacije</option>
                        <option value=4>Priprema za kolokvijum</option>
                        <option value=5>Skripta</option>
                    </select>
                </div>
                <hr>
                <button type="submit" class="btn btn-primary">Filter Notes</button>
            </form>
        </div>
    </div>
    <!-- Note cards -->
    @if (Beleske != null && Beleske.Count > 0)
    {
        <div class="row justify-content-center mt-4">
            @foreach (var note in Beleske)
            {
                <div class="col-md-4">
                    <div class="card mb-4">
                        <div class="card-body">
                            <h4 class="card-title text-center">@note.Naslov</h4>
                            <h6 class="card-text">@note.cas.Datum - @note.cas.predmet.Naziv</h6>
                            <br />
                            <blockquote class="blockquote mb-0">
                                <div class="blockquote-footer">
                                    @if(note.student != null)
                                    {
                                        <span class="card-text">@note.student.Ime @note.student.Prezime</span>
                                    }else{
                                        <span class="card-text">Anonymous</span>
                                    }
                                </div>
                            </blockquote>
                            @if(note.tagovi != null && note.tagovi.Count() > 0){
                                <div class="column mb-3 text-center text-muted">
                                    @foreach (var tag in note.tagovi)
                                    {
                                            <div class="badge bg-secondary m-1">@tag.Naziv</div>
                                    }
                                </div>
                            }
                        </div>
                        <div class="card-footer">
                            <button class="btn btn-primary" @onclick="() => OpenNoteDetail(note)">View Details</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>


<!-- Modal for note details -->
@if (selectedNote != null)
{
    <div class="modal fade show" id="noteDetailsModal" tabindex="-1" role="dialog" aria-labelledby="noteDetailsModalLabel" style="display: block; backdrop-filter: blur(5px)">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="noteDetailsModalLabel">@selectedNote.Naslov</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <RadzenHtmlEditor @ref="editor" @bind-Value="@content">
                        <RadzenHtmlEditorUndo />
                        <RadzenHtmlEditorRedo />
                        <RadzenHtmlEditorSeparator />
                        <RadzenHtmlEditorBold />
                        <RadzenHtmlEditorItalic />
                        <RadzenHtmlEditorUnderline />
                        <RadzenHtmlEditorStrikeThrough />
                        <RadzenHtmlEditorSeparator />
                        <RadzenHtmlEditorAlignLeft />
                        <RadzenHtmlEditorAlignCenter />
                        <RadzenHtmlEditorAlignRight />
                        <RadzenHtmlEditorJustify />
                        <RadzenHtmlEditorSeparator />
                        <RadzenHtmlEditorIndent />
                        <RadzenHtmlEditorOutdent />
                        <RadzenHtmlEditorUnorderedList />
                        <RadzenHtmlEditorOrderedList />
                        <RadzenHtmlEditorSeparator />
                        <RadzenHtmlEditorColor />
                        <RadzenHtmlEditorBackground />
                        <RadzenHtmlEditorRemoveFormat />
                        <RadzenHtmlEditorSeparator />
                        <RadzenHtmlEditorSubscript />
                        <RadzenHtmlEditorSuperscript />
                        <RadzenHtmlEditorSeparator />
                        <RadzenHtmlEditorFontName />
                        <RadzenHtmlEditorFontSize />
                        <RadzenHtmlEditorFormatBlock />
                    </RadzenHtmlEditor>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private RadzenHtmlEditor editor;
    private string content = "";
    private List<PredmetDTO>? Predmeti;
    private ObservableCollection<CasDTO>? Casovi;
    private List<SemestarDTO>? Semestri;
    private ObservableCollection<BeleskaDTO>? Beleske;
    PredmetDTO? SelectedSubject = null;
    CasDTO? SelectedLecture = null;
    SemestarDTO? SelectedSemestar = null;
    string authorName = "";
    string authorSurname = "";
    string title = "";
    DateOnly? datumOd = null;
    DateOnly? datumDo = null;
    Task<bool?> result;
    int[] tagovi = {};

    [CascadingParameter]
    public MainLayout MainLayout { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Casovi = new ObservableCollection<CasDTO>();
        Semestri = await DataService.GetAllSemestars();
        Predmeti = await DataService.GetAllSubjects();
        Beleske = new ObservableCollection<BeleskaDTO>();
    }

    private async Task SubjectInput(PredmetDTO? id)
    {
        if (id == null) return;
        SelectedSubject = id;
        Semestri!.Clear();
        (await GetSemestarsAsync(SelectedSubject.IdPredmet))?.ForEach(x => Semestri.Add(x));
        SelectedLecture = null;
        SelectedSemestar = null;
    }

    private async Task SemestarInput(SemestarDTO? id)
    {
        if (id == null) return;
        SelectedSemestar = id;
        if(SelectedSubject == null) return;
        Casovi!.Clear();
        (await GetLecturesAsync(SelectedSubject!.IdPredmet, id.IdSemestar))?.ForEach(x => Casovi.Add(x));
        SelectedLecture = null;
    }

    private Task<List<SemestarDTO>?> GetSemestarsAsync(int subjectId) => DataService.GetAllSemestarsForSubject(subjectId);

    private Task<List<CasDTO>?> GetLecturesAsync(int subjectId, int lectureId) => DataService.GetAllLecturesForSubjectSemestar(subjectId, lectureId);

    private void LectureInput(CasDTO? id)
    {
        if (id == null) return;
        SelectedLecture = id;
    }

    private void TagoviInput(int[] id)
    {
        tagovi = id;
    }

    private BeleskaDTO? selectedNote;


    private async Task FilterNotes()
    {
        if(LoginService.IsLoggedIn)
            result = DialogService.Confirm("Do you want to see only your Notes?", "My Notes", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        bool? resB = result != null ? await result : false;
        if (resB == true && LoginService.IsLoggedIn)
        {

            List<BeleskaDTO>? res = await DataService.FilterNotesBy(
                                                            predmet: SelectedSubject,
                                                            brCasa: SelectedLecture,
                                                            semestar: SelectedSemestar,
                                                            imeAutora: authorName,
                                                            prezimeAutora: authorSurname,
                                                            naslov: title,
                                                            idTagovi: tagovi,
                                                            datumDo: datumDo,
                                                            datumOd: datumOd,
                                                            moje: true);
            Beleske?.Clear();
            res?.ForEach(note => Beleske?.Add(note));
            MainLayout.Dispose();
            MainLayout.Timer = new(TimeSpan.Parse("00:01:00"));
            MainLayout.RunTimer();
        }
        else if (resB == true && !LoginService.IsLoggedIn)
        {
            await DialogService.Alert("You need to be logged in to see your notes!", "Not logged in", new AlertOptions() { OkButtonText = "Ok" });
            Navigation.NavigateTo("/login");
        }
        else
        {
            List<BeleskaDTO>? res = await DataService.FilterNotesBy(
                                                        predmet: SelectedSubject,
                                                        brCasa: SelectedLecture,
                                                        semestar: SelectedSemestar,
                                                        imeAutora: authorName,
                                                        prezimeAutora: authorSurname,
                                                        naslov: title,
                                                        idTagovi: tagovi,
                                                        datumDo: datumDo,
                                                        datumOd: datumOd,
                                                        moje: null);
            Beleske?.Clear();
            res?.ForEach(note => Beleske?.Add(note));
        }
    }

    private void OpenNoteDetail(BeleskaDTO note)
    {
        content = Encoding.UTF8.GetString(note.Dokument);
        selectedNote = note;
    }

    private void CloseModal()
    {
        selectedNote = null;
    }
}

